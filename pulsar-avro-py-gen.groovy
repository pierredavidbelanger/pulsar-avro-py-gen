@Grapes(
        @Grab(group = 'com.google.code.gson', module = 'gson', version = '2.8.8')
)
import com.google.gson.GsonBuilder
import groovy.text.SimpleTemplateEngine

static def parseType(List<Map<String, Object>> types, String ns, Object typeDef) {
    if (typeDef instanceof String) {
        return [name: typeDef]
    }
    if (typeDef instanceof List) {
        def nullable = false
        def type = null
        for (Object e : typeDef) {
            type = parseType(types, ns, e)
            if (type.name == 'null') {
                nullable = true
            }
        }
        type = type.clone()
        type.nullable = nullable
        return type
    }
    if (typeDef.type == 'array') {
        def type = parseType(types, ns, typeDef.items)
        type = type.clone()
        type.array = true
        return type
    }
    if (typeDef.type == 'enum') {
        def type = [:]
        type.name = typeDef.name
        type.enum = true
        type.symbols = typeDef.symbols
        types << type
        return type
    }
    if (typeDef.type == 'record') {
        ns = "${ns}${ns && typeDef.namespace ? '.' : ''}${typeDef.namespace ?: ''}".toString()
        def fqn = "${ns ?: ''}${ns ? '.' : ''}${typeDef.name}".toString()
        def type = [ns: ns, fqn: fqn, name: typeDef.name, fields: []]
        for (def fieldDef : typeDef.fields) {
            def field = [name: fieldDef.name]
            def fieldType = parseType(types, ns, fieldDef.type)
            field.type = fieldType.name
            if (fieldType.array) {
                field.array = true
            }
            if (fieldType.nullable) {
                field.nullable = true
            }
            type.fields << field
        }
        types << type
        return type
    }
    throw new RuntimeException("Unknown meta type '${typeDef.type}'")
}

def types = []

def schema = System.in.withReader { new GsonBuilder().create().fromJson(it, Map) }

parseType(types, '', schema)

def tpl = '''\\
# generated by pulsar-avro-py-gen on ${new Date()}
from pulsar.schema import *
<% types.each { type -> %>\\


<% if (type.enum) { %>\\
class ${type.name}(Enum):
<% type.symbols.eachWithIndex { symbol, i -> %>\\
    ${symbol} = ${i + 1}
<% } %>\\
<% } else { %>\\
class ${type.name}(Record):
<% type.fields.each { field -> %>\\
<% if (field.array) { %>\\
    ${field.name} = Array(${field.type.capitalize()}(), required=${field.nullable ? 'False' : 'True'})
<% } else { %>\\
    ${field.name} = ${field.type.capitalize()}(required=${field.nullable ? 'False' : 'True'})
<% } %>\\
<% } %>\\
<% } %>\\
<% } %>\\

'''

System.out.withWriter { new SimpleTemplateEngine().createTemplate(tpl).make([types: types]).writeTo(it) }
